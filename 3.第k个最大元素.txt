var findKthLargest = function(nums, k) {
    if(!nums || nums.length < 0) {
        return null;
    }

    let heap = [nums[0]];
    for(let i = 1; i < nums.length; i++) {
      if(heap.length >= k && nums[i] > heap[0]) {
        let tempData = heap.pop();
        k > 1 && (heap[0] = tempData);
        k > 1 && siftDown(0);
        heap.push(nums[i]);
        siftUp(heap.length - 1);
        console.log(heap)
      }

      if(heap.length < k) {
        heap.push(nums[i]);
        siftUp(heap.length - 1);
      }
    }

    function siftUp(cur) {
      if(cur < 1) {
        return
      }
      let parent = parseInt((cur - 1) / 2);

      if(heap[parent] > heap[cur]) {
        let temp = heap[parent];
        heap[parent] = heap[cur];
        heap[cur] = temp;

        parent > 0 && siftUp(parent);
      }
    }

    function siftDown(cur) {
      let lfChild = cur * 2 + 1, len = heap.length, minChild = void 0;

      if(lfChild + 1 < len) {
        minChild = lfChild;
        heap[lfChild] > heap[lfChild + 1] && (minChild = lfChild + 1);
      }else if(lfChild < len) {
        minChild = lfChild;
      }else {
        return;
      }

      if(heap[cur] > heap[minChild]) {
        let temp = heap[minChild];
        heap[minChild] = heap[cur];
        heap[cur] = temp;

        siftDown(minChild);
      }
    }

    return heap[0];
};

思路： 建立K个元素的小根堆， push完所有元素后 arr[0]为第k个最大元素
小根堆：存储在数组里面，逻辑结构为满二叉树， 每次加入元素 加入到最后一个，然后进行比较是否与父节点交换位置，
当满了之后， 将最后一个元素赋值给根节点，原根节点最小 删除。