var lowestCommonAncestor = function(root, p, q) {
    if(!root) return null;

    if(p === root || q === root) {
        return root;
    }

    let left = lowestCommonAncestor(root.left, p, q);
    let right = lowestCommonAncestor(root.right, p, q);

    if(!left) {
        return right;
    }

    if(!right) {
        return left;
    }

    if(left && right) {
        return root;
    }

    return null;
};

思路： 深度优先遍历，返回的结果为最深符合结果的节点