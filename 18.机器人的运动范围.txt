var movingCount = function(m, n, k) {
    let res = 0, markTarget = [];
    for(let i = 0; i < m; i++) {
        markTarget[i] = [];
        for(let j = 0; j < n; j++) {
            markTarget[i][j] = true;
        }
    }

    function dfs(curM, curN) {
        if(curM < 0 || curN < 0 || curM > m - 1 || curN > n - 1 || !markTarget[curM][curN]) {
            return;
        }
        markTarget[curM][curN] = false;

        let sum = numParse(curM + '') + numParse(curN + '');
        if(sum > k) {
            flag = false;
            return;
        }else {
            res++;
        }

        dfs(curM + 1, curN);
        dfs(curM, curN + 1);
        dfs(curM - 1, curN);
        dfs(curM, curN - 1);
    }

    function numParse(numStr) {
        let total = 0;
        for(let i = 0; i <numStr.length; i++) {
            total += +numStr[i]
        }
        return total;
    }

    dfs(0, 0);
    return res;
};

思路：深度优先遍历， 当值大于k后 禁止继续往其它方向遍历， 用一个数组记忆已走的位置。 